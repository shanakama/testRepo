parameters:
- name: 'CARBON_APIMGT_VERSION'
  type: string
  default: '8.2.22'
- name: 'CC_VERSION'
  type: string
  default: '0.9.0'
- name: 'MAVEN_CACHE_FOLDER'
  type: string
  default: $(Pipeline.Workspace)/.m2/repository
- name: 'MAVEN_OPTS'
  type: string
  default: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
- name: 'MAVEN_VERSION'
  type: string
  default: '3.6.3'
- name: 'MAVEN_HOME'
  type: string
  default: ''
- name: 'IMAGE_TAG'
  type: string
  default: 'latest'
- name: 'REPOSITORY'
  type: string
  default: 'choreoipaas/choreo-product-apim'
- name: 'CONTAINER_REGISTRY'
  type: string
  default: 'choreocontrolplane.azurecr.io'
- name: 'SKIP_SCENARIO_TESTS'
  type: boolean
  default: false

steps:
- task: Docker@2
  displayName: Login to ACR
  inputs:
    command: login
    containerRegistry: wso2choreo-control-plane-acr

- task: CmdLine@2
  inputs:
    script: |
      docker pull ${{parameters.CONTAINER_REGISTRY}}/choreoipaas/choreo-mgw-router:latest
      docker pull ${{parameters.CONTAINER_REGISTRY}}/choreoipaas/choreo-mgw-adapter:latest
      docker pull ${{parameters.CONTAINER_REGISTRY}}/choreoipaas/choreo-mgw-enforcer:latest
  displayName: "Pull choreo-connect images for scenario test deployment"

- task: Maven@3
  inputs:
    mavenPomFile: '$(Agent.BuildDirectory)/choreo-product-apim/pom.xml'
    goals: 'clean install'
    options: '${{parameters.MAVEN_OPTS}} -Dmaven.test.skip=true -Dcarbon.apimgt.version=${{parameters.CARBON_APIMGT_VERSION}}
        -pl modules/styles,modules/org.wso2.am.multitenancy.dashboard.ui,modules/features,modules/p2-profile,modules/oauth2-grant-types,modules/authenticators,modules/distribution
        -am -amd'
    mavenOptions: '-Xmx3072m'
    mavenVersionOption: 'Path'
    mavenDirectory: ${{parameters.MAVEN_HOME}}
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'
    jdkArchitectureOption: 'x64'
  displayName: Build Choreo APIM

- task: Docker@2
  inputs:
    command: build
    repository: ${{parameters.REPOSITORY}}
    Dockerfile: '$(Agent.BuildDirectory)/choreo-product-apim/Dockerfile'
    buildContext: '$(Agent.BuildDirectory)/choreo-product-apim'
    tags: |
      ${{parameters.IMAGE_TAG}}
      latest
  displayName: 'Build Docker Image'

- task: CmdLine@2
  condition: eq('${{ parameters.SKIP_SCENARIO_TESTS }}', false)
  inputs:
    script: |
      set -ex -o pipefail

      # Download CC distribution.
      wget https://github.com/wso2/product-microgateway/releases/download/v${{parameters.CC_VERSION}}/choreo-connect-${{parameters.CC_VERSION}}.zip \
      -O $(Agent.TempDirectory)/choreo-connect-${{parameters.CC_VERSION}}.zip
      unzip -q $(Agent.TempDirectory)/choreo-connect-${{parameters.CC_VERSION}}.zip -d $(Agent.TempDirectory)
      cd $(Agent.TempDirectory)/choreo-connect-${{parameters.CC_VERSION}}/docker-compose/choreo-connect-with-apim

      # Replace APIM docker image name with built Choreo APIM docker image name
      ESCAPED_ROUTER_REPO=$(echo '${{parameters.CONTAINER_REGISTRY}}/choreoipaas/choreo-mgw-router:latest' | sed 's/\//\\\//g')
      ESCAPED_ADAPTER_REPO=$(echo '${{parameters.CONTAINER_REGISTRY}}/choreoipaas/choreo-mgw-adapter:latest' | sed 's/\//\\\//g')
      ESCAPED_ENFORCER_REPO=$(echo '${{parameters.CONTAINER_REGISTRY}}/choreoipaas/choreo-mgw-enforcer:latest' | sed 's/\//\\\//g')
      ESCAPED_REPO=$(echo ${{parameters.CONTAINER_REGISTRY}}/${{parameters.REPOSITORY}} | sed 's/\//\\\//g')

      sed -i -E "s/image:\s*wso2\/choreo-connect-router:[^\n]*/image: ${ESCAPED_ROUTER_REPO}/" docker-compose.yaml
      sed -i -E "s/image:\s*wso2\/choreo-connect-adapter:[^\n]*/image: ${ESCAPED_ADAPTER_REPO}/" docker-compose.yaml
      sed -i -E "s/image:\s*wso2\/choreo-connect-enforcer:[^\n]*/image: ${ESCAPED_ENFORCER_REPO}/" docker-compose.yaml
      sed -i -E "s/image:\s*wso2\/wso2am:[^\n]*/image: ${ESCAPED_REPO}:${{parameters.IMAGE_TAG}}/" docker-compose.yaml

      # Replace volume mounts for Choreo APIM.
      VOL1="- $(Agent.BuildDirectory)/choreo-product-apim/.azure/drop/deployment.toml:/home/wso2carbon/wso2-config-volume/repository/conf/deployment.toml"
      ESCAPED_VOL1=$(echo $VOL1 | sed 's/\//\\\//g')
      sed -i -E "s/^(\s*)\-\s*\.\/conf\/deployment\.toml:.*$/\1${ESCAPED_VOL1}/" docker-compose.yaml

      # Copy mysql scripts here since they will be mounted by the mysql service
      cp -r $(Agent.BuildDirectory)/choreo-product-apim/.azure/drop/mysql .

      mkdir -p mysql/sql-scripts

      # Combine DB Schema and Data into a single sql script
      cat $(Agent.BuildDirectory)/choreo-control-plane/databases/scripts/choreo_apim_db.sql > mysql/sql-scripts/choreo_apim_db.sql
      echo "\n" >> mysql/sql-scripts/choreo_apim_db.sql
      cat mysql/choreo_apim_db_dump.sql >> mysql/sql-scripts/choreo_apim_db.sql

      cat $(Agent.BuildDirectory)/choreo-control-plane/databases/scripts/choreo_apim_shared_db.sql > mysql/sql-scripts/choreo_apim_shared_db.sql
      echo "\n" >> mysql/sql-scripts/choreo_apim_shared_db.sql
      cat mysql/choreo_apim_shared_db_dump.sql >> mysql/sql-scripts/choreo_apim_shared_db.sql

      # Add mysql service to docker-compose.yaml
      sed -i -e "/services:/r $(Agent.BuildDirectory)/choreo-product-apim/.azure/drop/mysql/mysql-docker-compose.yaml" docker-compose.yaml
      # Add depends on mysql to apim service
      sed -i -e "/repository\/conf\/deployment.toml/a\\    depends_on:\\n      mysql:\\n        condition: service_healthy" docker-compose.yaml
      # Disable ssl verification until product-microgateway#2054 issue is fixed in router
      sed -i -E "s/(disableSslVerification.+)false/\1true/" conf/config.toml

      # Run the deployment.
      cat docker-compose.yaml
      docker-compose up -d

  displayName: "Deploy Runtime"

- template: wait-for-http-200.yml
  parameters:
    URL: https://localhost:9095/health
    TIMEOUT_SECONDS: 300
    DISPLAY_NAME: 'Wait for Choreo and Choreo Connect to initialize'
    SKIP: ${{parameters.SKIP_SCENARIO_TESTS}}

- task: Bash@3
  condition: eq('${{ parameters.SKIP_SCENARIO_TESTS }}', false)
  inputs:
    targetType: 'inline'
    script: |
      cd $(Agent.BuildDirectory)/choreo-product-apim/product-scenarios
      bash test.sh --input-dir $(Agent.BuildDirectory)/choreo-product-apim/product-scenarios/input --output-dir $(Agent.BuildDirectory)/scenario-test-artifacts
  displayName: "Run scenario tests"

- task: PublishPipelineArtifact@1
  name: publishScenarioTestLogs
  condition: and(failed(), eq('${{ parameters.SKIP_SCENARIO_TESTS }}', false))
  displayName: 'Publish Scenario Test Logs'
  inputs:
    targetPath: $(Agent.BuildDirectory)/scenario-test-artifacts
    artifactName: Scenario-Test-Logs
